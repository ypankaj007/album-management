// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/album/album.proto

package go_micro_srv_album

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AlbumService service

type AlbumService interface {
	CreateAlbum(ctx context.Context, in *Album, opts ...client.CallOption) (*Response, error)
	CreateImage(ctx context.Context, opts ...client.CallOption) (AlbumService_CreateImageService, error)
	DeleteAlbum(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*Response, error)
	DeleteImage(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*Response, error)
	GetAlbum(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*AlbumResponse, error)
	GetImage(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*ImageResponse, error)
	ListAlbum(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*Albums, error)
	ListImage(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*Images, error)
}

type albumService struct {
	c    client.Client
	name string
}

func NewAlbumService(name string, c client.Client) AlbumService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.album"
	}
	return &albumService{
		c:    c,
		name: name,
	}
}

func (c *albumService) CreateAlbum(ctx context.Context, in *Album, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AlbumService.CreateAlbum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) CreateImage(ctx context.Context, opts ...client.CallOption) (AlbumService_CreateImageService, error) {
	req := c.c.NewRequest(c.name, "AlbumService.CreateImage", &UploadImageRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &albumServiceCreateImage{stream}, nil
}

type AlbumService_CreateImageService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UploadImageRequest) error
}

type albumServiceCreateImage struct {
	stream client.Stream
}

func (x *albumServiceCreateImage) Close() error {
	return x.stream.Close()
}

func (x *albumServiceCreateImage) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *albumServiceCreateImage) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *albumServiceCreateImage) Send(m *UploadImageRequest) error {
	return x.stream.Send(m)
}

func (c *albumService) DeleteAlbum(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AlbumService.DeleteAlbum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) DeleteImage(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AlbumService.DeleteImage", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) GetAlbum(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*AlbumResponse, error) {
	req := c.c.NewRequest(c.name, "AlbumService.GetAlbum", in)
	out := new(AlbumResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) GetImage(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*ImageResponse, error) {
	req := c.c.NewRequest(c.name, "AlbumService.GetImage", in)
	out := new(ImageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) ListAlbum(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*Albums, error) {
	req := c.c.NewRequest(c.name, "AlbumService.ListAlbum", in)
	out := new(Albums)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) ListImage(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*Images, error) {
	req := c.c.NewRequest(c.name, "AlbumService.ListImage", in)
	out := new(Images)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AlbumService service

type AlbumServiceHandler interface {
	CreateAlbum(context.Context, *Album, *Response) error
	CreateImage(context.Context, AlbumService_CreateImageStream) error
	DeleteAlbum(context.Context, *DeleteRequest, *Response) error
	DeleteImage(context.Context, *DeleteRequest, *Response) error
	GetAlbum(context.Context, *GetRequest, *AlbumResponse) error
	GetImage(context.Context, *GetRequest, *ImageResponse) error
	ListAlbum(context.Context, *SearchRequest, *Albums) error
	ListImage(context.Context, *SearchRequest, *Images) error
}

func RegisterAlbumServiceHandler(s server.Server, hdlr AlbumServiceHandler, opts ...server.HandlerOption) error {
	type albumService interface {
		CreateAlbum(ctx context.Context, in *Album, out *Response) error
		CreateImage(ctx context.Context, stream server.Stream) error
		DeleteAlbum(ctx context.Context, in *DeleteRequest, out *Response) error
		DeleteImage(ctx context.Context, in *DeleteRequest, out *Response) error
		GetAlbum(ctx context.Context, in *GetRequest, out *AlbumResponse) error
		GetImage(ctx context.Context, in *GetRequest, out *ImageResponse) error
		ListAlbum(ctx context.Context, in *SearchRequest, out *Albums) error
		ListImage(ctx context.Context, in *SearchRequest, out *Images) error
	}
	type AlbumService struct {
		albumService
	}
	h := &albumServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AlbumService{h}, opts...))
}

type albumServiceHandler struct {
	AlbumServiceHandler
}

func (h *albumServiceHandler) CreateAlbum(ctx context.Context, in *Album, out *Response) error {
	return h.AlbumServiceHandler.CreateAlbum(ctx, in, out)
}

func (h *albumServiceHandler) CreateImage(ctx context.Context, stream server.Stream) error {
	return h.AlbumServiceHandler.CreateImage(ctx, &albumServiceCreateImageStream{stream})
}

type AlbumService_CreateImageStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*UploadImageRequest, error)
}

type albumServiceCreateImageStream struct {
	stream server.Stream
}

func (x *albumServiceCreateImageStream) Close() error {
	return x.stream.Close()
}

func (x *albumServiceCreateImageStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *albumServiceCreateImageStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *albumServiceCreateImageStream) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *albumServiceHandler) DeleteAlbum(ctx context.Context, in *DeleteRequest, out *Response) error {
	return h.AlbumServiceHandler.DeleteAlbum(ctx, in, out)
}

func (h *albumServiceHandler) DeleteImage(ctx context.Context, in *DeleteRequest, out *Response) error {
	return h.AlbumServiceHandler.DeleteImage(ctx, in, out)
}

func (h *albumServiceHandler) GetAlbum(ctx context.Context, in *GetRequest, out *AlbumResponse) error {
	return h.AlbumServiceHandler.GetAlbum(ctx, in, out)
}

func (h *albumServiceHandler) GetImage(ctx context.Context, in *GetRequest, out *ImageResponse) error {
	return h.AlbumServiceHandler.GetImage(ctx, in, out)
}

func (h *albumServiceHandler) ListAlbum(ctx context.Context, in *SearchRequest, out *Albums) error {
	return h.AlbumServiceHandler.ListAlbum(ctx, in, out)
}

func (h *albumServiceHandler) ListImage(ctx context.Context, in *SearchRequest, out *Images) error {
	return h.AlbumServiceHandler.ListImage(ctx, in, out)
}
